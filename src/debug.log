[ [32mINFO[0m telepirate ] Starting up ...
[ [32mINFO[0m telepirate::bot ] Building ngrok tunnel ...
[ [35mDEBUG[0m rustls::anchors ] add_parsable_certificates processed 1 valid and 0 invalid certs
[ [35mDEBUG[0m rustls::client::hs ] No cached session for DnsName(DnsName(DnsName("tunnel.ngrok.com")))
[ [35mDEBUG[0m rustls::client::hs ] Not resuming any session
[ [34mTRACE[0m rustls::client::hs ] Sending ClientHello Message {
    version: TLSv1_0,
    payload: Handshake {
        parsed: HandshakeMessagePayload {
            typ: ClientHello,
            payload: ClientHello(
                ClientHelloPayload {
                    client_version: TLSv1_2,
                    random: 871710dec146821031c5b7e8c66c578831531a2cd7351f292149558d5836d5a0,
                    session_id: 227776185e26c78ec61803d448338dd0d8faebeb69d88526b4351ec76915ddb2,
                    cipher_suites: [
                        TLS13_AES_256_GCM_SHA384,
                        TLS13_AES_128_GCM_SHA256,
                        TLS13_CHACHA20_POLY1305_SHA256,
                        TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
                        TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
                        TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
                        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
                        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
                        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
                        TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
                    ],
                    compression_methods: [
                        Null,
                    ],
                    extensions: [
                        SupportedVersions(
                            [
                                TLSv1_3,
                                TLSv1_2,
                            ],
                        ),
                        ECPointFormats(
                            [
                                Uncompressed,
                            ],
                        ),
                        NamedGroups(
                            [
                                X25519,
                                secp256r1,
                                secp384r1,
                            ],
                        ),
                        SignatureAlgorithms(
                            [
                                ECDSA_NISTP384_SHA384,
                                ECDSA_NISTP256_SHA256,
                                ED25519,
                                RSA_PSS_SHA512,
                                RSA_PSS_SHA384,
                                RSA_PSS_SHA256,
                                RSA_PKCS1_SHA512,
                                RSA_PKCS1_SHA384,
                                RSA_PKCS1_SHA256,
                            ],
                        ),
                        ExtendedMasterSecretRequest,
                        CertificateStatusRequest(
                            OCSP(
                                OCSPCertificateStatusRequest {
                                    responder_ids: [],
                                    extensions: ,
                                },
                            ),
                        ),
                        ServerName(
                            [
                                ServerName {
                                    typ: HostName,
                                    payload: HostName(
                                        (
                                            74756e6e656c2e6e67726f6b2e636f6d,
                                            DnsName(
                                                "tunnel.ngrok.com",
                                            ),
                                        ),
                                    ),
                                },
                            ],
                        ),
                        SignedCertificateTimestampRequest,
                        KeyShare(
                            [
                                KeyShareEntry {
                                    group: X25519,
                                    payload: 5f71e388a6d9bee17a9eaf58d8d0a620f19bc304a6c3f09448a3eef59228f51e,
                                },
                            ],
                        ),
                        PresharedKeyModes(
                            [
                                PSK_DHE_KE,
                            ],
                        ),
                        SessionTicket(
                            Request,
                        ),
                    ],
                },
            ),
        },
        encoded: 010000ee0303871710dec146821031c5b7e8c66c578831531a2cd7351f292149558d5836d5a020227776185e26c78ec61803d448338dd0d8faebeb69d88526b4351ec76915ddb20014130213011303c02cc02bcca9c030c02fcca800ff01000091002b00050403040303000b00020100000a00080006001d00170018000d001400120503040308070806080508040601050104010017000000050005010000000000000015001300001074756e6e656c2e6e67726f6b2e636f6d00120000003300260024001d00205f71e388a6d9bee17a9eaf58d8d0a620f19bc304a6c3f09448a3eef59228f51e002d0002010100230000,
    },
}
[ [34mTRACE[0m rustls::client::hs ] We got ServerHello ServerHelloPayload {
    legacy_version: TLSv1_2,
    random: 804cb3dcbdb00d9fe76d388a78d4c5be0e5e0ea756d88d1751afb19f0c272254,
    session_id: 227776185e26c78ec61803d448338dd0d8faebeb69d88526b4351ec76915ddb2,
    cipher_suite: TLS13_AES_128_GCM_SHA256,
    compression_method: Null,
    extensions: [
        SupportedVersions(
            TLSv1_3,
        ),
        KeyShare(
            KeyShareEntry {
                group: X25519,
                payload: 10e2682f3a836449c0d11f5d96e1fee943e7de5cf0a2c494efd2a08fabd22602,
            },
        ),
    ],
}
[ [35mDEBUG[0m rustls::client::hs ] Using ciphersuite TLS13_AES_128_GCM_SHA256
[ [35mDEBUG[0m rustls::client::tls13 ] Not resuming
[ [34mTRACE[0m rustls::client::client_conn ] EarlyData rejected
[ [34mTRACE[0m rustls::conn ] Dropping CCS
[ [35mDEBUG[0m rustls::client::tls13 ] TLS1.3 encrypted extensions: []
[ [35mDEBUG[0m rustls::client::hs ] ALPN protocol is None
[ [34mTRACE[0m rustls::client::tls13 ] Server cert is [Certificate(b"0\x82\x02\xe10\x82\x01\xc9\xa0\x03\x02\x01\x02\x02\x11\0\xc4\xfa\xd1\x0f\xfe\r\xbc\x9d\x8a\x1e2?\xf3\xbc\xa6\xbe0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\00_1\x0b0\t\x06\x03U\x04\x06\x13\x02US1\x130\x11\x06\x03U\x04\x08\x0c\nCalifornia1\x120\x10\x06\x03U\x04\n\x0c\tngrok Inc1\r0\x0b\x06\x03U\x04\x0b\x0c\x04prod1\x180\x16\x06\x03U\x04\x03\x0c\x0fIntermediate CA0\x1e\x17\r230510163154Z\x17\r250812163154Z0O1\x0b0\t\x06\x03U\x04\x06\x13\x02US1\x130\x11\x06\x03U\x04\x08\x13\nCalifornia1\x160\x14\x06\x03U\x04\x07\x13\rSan Francisco1\x130\x11\x06\x03U\x04\n\x13\nngrok Inc.0Y0\x13\x06\x07*\x86H\xce=\x02\x01\x06\x08*\x86H\xce=\x03\x01\x07\x03B\0\x04\x07\xa5J\xac\x90*\xeb\x95\xe0\xd2\xc0f7\x1c\0zaj\x9a\x9c\xa7\xd4\xbd\xc8c@\xaa\xb6\"\x11\x89\xed\x85\xc2\xae\xbf\xb35\xc3\xb4\x1e\xdf\x1e\x90\x80\xd8\x8f\xf8\x04\xe3Hqz\xab'\xe2\xfd\xc1\n\xb09f\xd8\xec\xa3s0q0\x0e\x06\x03U\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x05\xa00\x13\x06\x03U\x1d%\x04\x0c0\n\x06\x08+\x06\x01\x05\x05\x07\x03\x010\x0c\x06\x03U\x1d\x13\x01\x01\xff\x04\x020\00\x1f\x06\x03U\x1d#\x04\x180\x16\x80\x14\x9e;\x9d\x1c\xc7h\xe4\xfe\xbd\x8e87t\xc21\x8bF\x94\x18\xc80\x1b\x06\x03U\x1d\x11\x04\x140\x12\x82\x10tunnel.ngrok.com0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\0\x03\x82\x01\x01\0\x1a\x8d\xb5\xe4\xb7NaF\xdf>\xaa\xf3\xb7 \xda\tj4\xc9\x1cg\xc7d\xaa1:A\x84\xde\x18\xbd+\xce\xe8)\x19o\x94\xfca\x12\xee.d\x12\xc5\x99\x9d2\x99\x91\xc799\xe8\xfd\xfaN0.)j\xd1y\xf4'\xd5\r5\xc2C\x17\xcf\x04Q\xca?)\x8f\xf2\xacN\x86\rJ\x86\x08\x9b\xea0r?\x960M\x90(\xb3\"\x05\xdf\xdb0S[\xe9Z\xbd\x1b\xba\xe7nq>\xd0\x8a\xe5G\x06?pY\xdd\xa6\xe8\xbeK3\xbf`UR\xc8\x8fx\xa0\xdd\xccsc\xc0\x9efZ\xbb\xc9\x9d\t t\xc5\x93\xfa\x0f\xf8\xbcj<\x1am\x85At\xcca\xff\xa0o\x831}H3y@\xfd\xe5\xda\x96\xc9e\xa7\xc6F\xc9\x03nZ\xf0\xc8\xa5BFLNpf\x1bI\xc65 \xc1\x9d{\x18\xa5\x03\xffY\xf4\x1e\xc8\xbe%\"\xb6\xf3\xac\xe7\x89\x05\xc9\xe0:\xd3\x8b\x13\xf8v$\x85\xe8M%EJ\x15\x94x\xab\xdf\xcc\xc2\xef\xbf[\x9b\xd6\xd0|\x9f\x83\xab~\xb0"), Certificate(b"0\x82\x03\xc20\x82\x02\xaa\xa0\x03\x02\x01\x02\x02\x14f\xa1v\x02@u\xee\x92\x12\xa24\xe7v\x076S\x90C\xb7\xbc0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\00o1\x100\x0e\x06\x03U\x04\x03\x0c\x07Root CA1\r0\x0b\x06\x03U\x04\x0b\x0c\x04prod1\x120\x10\x06\x03U\x04\n\x0c\tngrok Inc1\x160\x14\x06\x03U\x04\x07\x0c\rSan Francisco1\x130\x11\x06\x03U\x04\x08\x0c\nCalifornia1\x0b0\t\x06\x03U\x04\x06\x13\x02US0\x1e\x17\r220831145948Z\x17\r320828145948Z0_1\x0b0\t\x06\x03U\x04\x06\x13\x02US1\x130\x11\x06\x03U\x04\x08\x0c\nCalifornia1\x120\x10\x06\x03U\x04\n\x0c\tngrok Inc1\r0\x0b\x06\x03U\x04\x0b\x0c\x04prod1\x180\x16\x06\x03U\x04\x03\x0c\x0fIntermediate CA0\x82\x01\"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\0\x03\x82\x01\x0f\00\x82\x01\n\x02\x82\x01\x01\0\xaf\xad\xf2\xafN\xb2\xdfA\xc4%\x97\x7f!\x86\xd2eP:\x92\"\xca\xbc\xf3el\xaaO\xa0\x99\xa4\xc66~\x93\x9at\xbb\x99x\x13\xfb\xb6-\x88\xc3\x81`\n\x97\xcb\x9e\xd2\xf4FWo0\xc3X\xe2\xaa\xba\xd5\xd5k\x0b\x08K\xfe\xfd\xa5v\xc6\x87Q\xdc\xe3\xb4X\xf5\x8b\xe6M\x19KU\xe0Od\xa2\xb1\xf1\x9bf\x1d\xb0?u\xc3\xa5\x88\x8c_\xc9\xd2[\xe8_i(/\x01e\x19\xcf\xc2\x92\x14\xfc\xcfeVy\xb6<k\xa9\x987,\xf9K\xbc\x8fM\x08v\xfed5\xe2\\\x7f@\xf2`e!D\x13\xf1\x04\x90\xc0\xc2n\xce\x01\xa0\xcb\xaa(\xc8B\xa6\xa1\x0f\xf2n>\x0b\x13\xd0\xe7\xf5z<\xe4\xaaP\x8cS\xe0\x0e\xdeYh\xf61\x1ag\x9a*\xe6U\xb5\xcesn\0\xcez\xa4m\xd4\x14?\x8a\x9a\x82$\x7f\x8b\xba\x8f\xb1\x1c~\x7f\x89\x85|9\xe2\x9c\xfb\x17\xa7\xf7c\x8c\x1c\xa8\xd3\x1c\xdd\x87\xe8\xb5\x1c\\\x8eG\xfe\xe7\xc8\xd0\xca\x94\x9f\x9e\xaf)\x91\x82u\x02\x03\x01\0\x01\xa3f0d0\x1d\x06\x03U\x1d\x0e\x04\x16\x04\x14\x9e;\x9d\x1c\xc7h\xe4\xfe\xbd\x8e87t\xc21\x8bF\x94\x18\xc80\x1f\x06\x03U\x1d#\x04\x180\x16\x80\x14\xdc^S\x13\xc83\xc1\xbbq}\x03\x84W<\xd6\x92\xc3\xe1o\x870\x12\x06\x03U\x1d\x13\x01\x01\xff\x04\x080\x06\x01\x01\xff\x02\x01\00\x0e\x06\x03U\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x01\x860\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\0\x03\x82\x01\x01\0Q\x9as(:\xd4\x1b`\xbe\xcf\n\x8dA\xe4(l\x95\xbf:\x1c\xfd\x96#X\xc6Ex[\x7f\0\x05\xdb$\x83\x16u\xf6e\xb4OV\xda\x10\xf8\x8b\xaa]lr\\\x07\xa2q\x88\xd7G\xa93\xc5\x7f!-g\xc3\xd7\x89\x16P\x8c\xfaf\x04\xf7\xb9\x9a\xc3H\x8c\xe6C\xebs\xf3;[O\xa9\x93#Q\x02Y\xd8\xcbW\xf8\xb9\xf1\xfe\xaf+8\x0b\x0f\xc5i\xddWU\x9e\xcf\r\x03\xd7\x9e\xe9\xae\xb9@\xd8\xd9\x12|\x01U\xe7\x1c\xca\xca\x16\x90\xec\x0c\xfc\xac\xeek8R\x19\xc1\xae\xe3\x8c\xbfK\x89\xf2\xf6\x90 \xec\xfa%\xdaEx6'\x03(>\xadH\x07W\x98\xf9\xa3\x15\xa9XQ\xf9\xcc\x9b(n\xad\x92\x0f\xad-\x9d\x81\x88):\xb1\x953\n\xe8\x9d3\x99\xdc\x15\x1f\xe02\xf8\xceI&p\xb5\xec\xb3R\xb3\xb5\t\xcbwm\xe7\xb8\xd8\x88\xb1\xcc\x0cpc9\xf1\xad\xce\xe75)\xed\xaa+~\xb9\xbbq\xd4`\x90Y\x9caSN\xff\xab\x86C\x98\x89\xf8\xfad"), Certificate(b"0\x82\x03\x930\x82\x02{\xa0\x03\x02\x01\x02\x02\t\0\x81\x81\x9a{\xbc\xbc_z0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\00<1\x0b0\t\x06\x03U\x04\x06\x13\x02US1\x130\x11\x06\x03U\x04\x08\x0c\nCalifornia1\x180\x16\x06\x03U\x04\n\x0c\x0finconshreveable0 \x17\r220831150153Z\x18\x0f47600728150153Z0o1\x100\x0e\x06\x03U\x04\x03\x0c\x07Root CA1\r0\x0b\x06\x03U\x04\x0b\x0c\x04prod1\x120\x10\x06\x03U\x04\n\x0c\tngrok Inc1\x160\x14\x06\x03U\x04\x07\x0c\rSan Francisco1\x130\x11\x06\x03U\x04\x08\x0c\nCalifornia1\x0b0\t\x06\x03U\x04\x06\x13\x02US0\x82\x01\"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\0\x03\x82\x01\x0f\00\x82\x01\n\x02\x82\x01\x01\0\xc3\xe4f\x93\xa0\xb8(F\xf1\x05\xdf\xa7W\x82\xbbmp\x8a\x9am\x89c\xbdS\xa1v\r\x17\xf9\x96\x7f\x17\\\0(\x91\x9c\x9f\xa3\x82\x19\xef\xdeF\xf8\xa7d\x11\xba\xb8+\x14\x97\x1d\xe8a)\x01C\xc2Qg\xcc\x89\x19\xb0;\xba<v\x9b^\xcb\xad\x02cK\x9a\x84P\xce\xc1\x13M\xd8w\x80\xc1\t& \x96\xfakj\x99\xb5\x8f\x1fm\x86^u\x17\xc5\xeeQ\xe9\xd5\x9b\x91z\xab!<\xba\x9cZYY\xd1[*j=\xffUh\xc9gH\x81\xc5\xee\x8e\xad\x83h\xd0\x96\x9b`hC\xdb\x1e\t\xe6\xdc\xe7\xee\xa0\x17k2_;\xe8)Vx\xaa\x0e\x8e\xd5\xa9\xc2\x97R\xb4d\x7f\xf6\x985\xee\xffm\x8e\xd9N\x13\xaf\xf8\xfb\xe86\xb5c\xb4\xd6e\x80\xd4\xd9\xd23\xfa\xdc\x9fL\xe3+\x95\xacW\xcb\x1cf]\xec3:\x96#\x06!\xe2\xb1\xf3\xe9\xcf\xb0-\xad9@\xcd\xa1\x15V\x14ds\xce\xaf\x0bhx\xdb:\x87\xf0\x9b\xf4~2]|\xc9\x15]\xed\xdez\x01\x02\x03\x01\0\x01\xa3c0a0\x1d\x06\x03U\x1d\x0e\x04\x16\x04\x14\xdc^S\x13\xc83\xc1\xbbq}\x03\x84W<\xd6\x92\xc3\xe1o\x870\x1f\x06\x03U\x1d#\x04\x180\x16\x80\x14\xde\xdd\\\x14\xda\x84Cs\x9c&\x86\x7f{\xfa\xc89|\xb4N\xfa0\x0f\x06\x03U\x1d\x13\x01\x01\xff\x04\x050\x03\x01\x01\xff0\x0e\x06\x03U\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x01\x860\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\0\x03\x82\x01\x01\0\x93\r\x9c\x110Ve\x04\xec\xcd\x1f\x99\x13\xcf$ ;\xc4_p\xa11\xe2\x0c^\x16\xa1\xb7\xf8$\x12\xfc\xf4\xe5\xa9\xe8\xf5\xab\x0f\xf7\xcd\xba\xff\xa6\xaf\xa2\xd9\xce\xe7\xf6b\x91Gu\x1f.\x88\x16\x10\x18iH\xd18\x1d\xaa\xfak/\xb6\xa3E\xcc\x13\xa5?\xf9i\x0c\xf1\xb5\x92\x06\x9e<\xfcp\xc1s\\\xf8\xd2*\x07]6\x0f\xc2\xc1\x02\r\xbazC\x81O+\xc4(\\\x89\x9a\xa0\xed1\x9e\x98y\xcc\xee$*\x9b\xb5\"|M\xf9\xd0\x1e\xec\x90]aq\xa8)\xecH\x8a\xce\xcf\xbe\xf1D\x88\x0b\xa0\x93\x06\xff\xbd\"\x1b\xb5\xce\xf2\xe7A8\x17\xf3L\x18p\xec\x7f\xb4\xe6\x83\x7f2\x10\x8e\x1f\x9de.7\x83\x92\xf7\xaa^\x1c(\xeb\x95+\xe1\"\x12\xd1\xf7\xa2\xf0\xd0&\xf9k\xf2\xe0\xc5\x9e&\xb7A\xd2l\x1e\r\xca.H\xebw=\xc8\xd8\x86\xd8P\xde\xb8\x12\xe9P67N\xb1\r\xf6%\x92\xe7\x10\xe7\xb3\xa6\xbfU\x81z\xbfP{\x051\x16\xebk\xc2\x02\xa5\xe9")]
[ [35mDEBUG[0m rustls::client::tls13 ] Ticket saved
[ [35mDEBUG[0m tracing::span ] read_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [35mDEBUG[0m tracing::span ] write_task;
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(3) }, body: Data(b"\xff\xff\xff\xff") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [35mDEBUG[0m muxado::heartbeat ] sending heartbeat
[ [35mDEBUG[0m ngrok::internals::raw_session ] auth; id="" extra=AuthExtra { os: "linux", arch: "x86_64", auth_token: ********, version: "0.12.4", hostname: "", user_agent: "ngrok-rust/0.12.4", metadata: "", cookie: ********, heartbeat_interval: 10000000000, heartbeat_tolerance: 10000000000, update_unsupported_error: Some("the agent has not defined a callback for this operation"), stop_unsupported_error: Some("the agent has not defined a callback for this operation"), restart_unsupported_error: Some("the agent has not defined a callback for this operation"), proxy_type: "", mutual_tls: false, service_run: false, config_version: "", custom_interface: false, custom_cas: false, client_type: "ngrok-rust" }
[ [35mDEBUG[0m muxado::heartbeat ] waiting for response
[ [35mDEBUG[0m ngrok::internals::raw_session ] rpc; req=Auth { version: ["2"], client_id: "", extra: AuthExtra { os: "linux", arch: "x86_64", auth_token: ********, version: "0.12.4", hostname: "", user_agent: "ngrok-rust/0.12.4", metadata: "", cookie: ********, heartbeat_interval: 10000000000, heartbeat_tolerance: 10000000000, update_unsupported_error: Some("the agent has not defined a callback for this operation"), stop_unsupported_error: Some("the agent has not defined a callback for this operation"), restart_unsupported_error: Some("the agent has not defined a callback for this operation"), proxy_type: "", mutual_tls: false, service_run: false, config_version: "", custom_interface: false, custom_cas: false, client_type: "ngrok-rust" } }
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: (empty), stream_id: StreamID(3) }, body: Data(b"\xd0v(9") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(5) }, body: Data(b"\0\0\0\0") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(628), typ: Data, flags: (empty), stream_id: StreamID(5) }, body: Data(b"{\"Version\":[\"2\"],\"ClientId\":\"\",\"Extra\":{\"OS\":\"linux\",\"Arch\":\"x86_64\",\"AuthToken\":\"\",\"Version\":\"0.12.4\",\"Hostname\":\"\",\"UserAgent\":\"ngrok-rust/0.12.4\",\"Metadata\":\"\",\"Cookie\":\"\",\"HeartbeatInterval\":10000000000,\"HeartbeatTolerance\":10000000000,\"UpdateUnsupportedError\":\"the agent has not defined a callback for this operation\",\"StopUnsupportedError\":\"the agent has not defined a callback for this operation\",\"RestartUnsupportedError\":\"the agent has not defined a callback for this operation\",\"ProxyType\":\"\",\"MutualTLS\":false,\"ServiceRun\":false,\"ConfigVersion\":\"\",\"CustomInterface\":false,\"CustomCAs\":false,\"ClientType\":\"ngrok-rust\"}}") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=636
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(512)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(512)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(512)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(116)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(116)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(116)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: (empty), stream_id: StreamID(3) }, body: Data(b"\xd0v(9") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: Data, flags: (empty), stream_id: StreamID(3) }, body: Data(b"\xd0v(9") }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: Data, flags: (empty), stream_id: StreamID(3) }, body: Data(b"\xd0v(9") }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(2) }, body: Data(b"\xff\xff\xff\xff") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(2) }, body: Data(b"\xff\xff\xff\xff") }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(2) }, body: Data(b"\xff\xff\xff\xff") }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [35mDEBUG[0m muxado::heartbeat ] got response
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(3) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(552), typ: Data, flags: (empty), stream_id: StreamID(5) }, body: Data(b"{\"Version\":\"2\",\"ClientId\":\"ee75776d9a77facc2dea335e21a79409\",\"Error\":\"\",\"Extra\":{\"Version\":\"prod\",\"Region\":\"eu\",\"Cookie\":\"F7RS3EtdLDFWUgzjUxWKBRHudI56+TJ2$vgX/ERLy1oQJshuoJf9aCfXxzHLpP/vbtmQQE+9ZY7ctbFEz0XnbwMJ5gWHUF93bY2D9+xl0CaM0wMrUjxVYXalg6QP/SXa3PfhJK4kEuDmCiCZi86xkX9uJ9aajECG2Yxhc+LjcLccrpDhv3Ml5KZTCDXjrU4oK6xDwVNlPGXL5OPf6a0BBSjFZ2ZF20rDvOMzsP5+IUWY37nP2DLCBqAz7\",\"AccountName\":\"\",\"SessionDuration\":7199,\"PlanName\":\"\",\"Banner\":\"\xf0\x9f\xa4\xaf Announcing ngrok's Kubernetes Ingress Controller: https://ngrok.com/s/k8s-ingress\",\"DeprecationWarning\":null}}") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(552), typ: Data, flags: (empty), stream_id: StreamID(5) }, body: Data(b"{\"Version\":\"2\",\"ClientId\":\"ee75776d9a77facc2dea335e21a79409\",\"Error\":\"\",\"Extra\":{\"Version\":\"prod\",\"Region\":\"eu\",\"Cookie\":\"F7RS3EtdLDFWUgzjUxWKBRHudI56+TJ2$vgX/ERLy1oQJshuoJf9aCfXxzHLpP/vbtmQQE+9ZY7ctbFEz0XnbwMJ5gWHUF93bY2D9+xl0CaM0wMrUjxVYXalg6QP/SXa3PfhJK4kEuDmCiCZi86xkX9uJ9aajECG2Yxhc+LjcLccrpDhv3Ml5KZTCDXjrU4oK6xDwVNlPGXL5OPf6a0BBSjFZ2ZF20rDvOMzsP5+IUWY37nP2DLCBqAz7\",\"AccountName\":\"\",\"SessionDuration\":7199,\"PlanName\":\"\",\"Banner\":\"\xf0\x9f\xa4\xaf Announcing ngrok's Kubernetes Ingress Controller: https://ngrok.com/s/k8s-ingress\",\"DeprecationWarning\":null}}") }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(552), typ: Data, flags: (empty), stream_id: StreamID(5) }, body: Data(b"{\"Version\":\"2\",\"ClientId\":\"ee75776d9a77facc2dea335e21a79409\",\"Error\":\"\",\"Extra\":{\"Version\":\"prod\",\"Region\":\"eu\",\"Cookie\":\"F7RS3EtdLDFWUgzjUxWKBRHudI56+TJ2$vgX/ERLy1oQJshuoJf9aCfXxzHLpP/vbtmQQE+9ZY7ctbFEz0XnbwMJ5gWHUF93bY2D9+xl0CaM0wMrUjxVYXalg6QP/SXa3PfhJK4kEuDmCiCZi86xkX9uJ9aajECG2Yxhc+LjcLccrpDhv3Ml5KZTCDXjrU4oK6xDwVNlPGXL5OPf6a0BBSjFZ2ZF20rDvOMzsP5+IUWY37nP2DLCBqAz7\",\"AccountName\":\"\",\"SessionDuration\":7199,\"PlanName\":\"\",\"Banner\":\"\xf0\x9f\xa4\xaf Announcing ngrok's Kubernetes Ingress Controller: https://ngrok.com/s/k8s-ingress\",\"DeprecationWarning\":null}}") }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(5) }, body: Data(b"") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(5) }, body: Data(b"") }
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(32)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(5) }, body: Data(b"") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(32)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [35mDEBUG[0m ngrok::internals::raw_session ] decoded rpc response resp=Ok(AuthResp { version: "2", client_id: "ee75776d9a77facc2dea335e21a79409", extra: AuthRespExtra { version: Some("prod"), region: Some("eu"), cookie: Some(********), account_name: Some(""), session_duration: Some(7199), plan_name: Some(""), banner: Some("🤯 Announcing ngrok's Kubernetes Ingress Controller: https://ngrok.com/s/k8s-ingress") } })
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(64)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tracing::span ] -- rpc;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(128)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tracing::span ] -- auth;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(256)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(5) }, body: WndInc(WndInc(40)) }
[ [35mDEBUG[0m ngrok::internals::raw_session ] listen; protocol="https" opts=Http(HttpEndpoint { hostname: "", auth: "", subdomain: "", host_header_rewrite: false, local_url_scheme: None, proxy_proto: None, compression: None, circuit_breaker: None, ip_restriction: None, basic_auth: None, oauth: None, oidc: None, webhook_verification: None, mutual_tls_ca: None, request_headers: None, response_headers: None, websocket_tcp_converter: None }) extra=BindExtra { token: ********, ip_policy_ref: "", metadata: "" } id="" forwards_to="app://host//home/user/PycharmProjects/telepirate/target/debug/telepirate?pid=7741"
[ [35mDEBUG[0m muxado::typed ] read stream type typ=StreamType(4294967295)
[ [35mDEBUG[0m ngrok::internals::raw_session ] rpc; req=Bind { client_id: "", proto: "https", forwards_to: "app://host//home/user/PycharmProjects/telepirate/target/debug/telepirate?pid=7741", opts: HttpEndpoint { hostname: "", auth: "", subdomain: "", host_header_rewrite: false, local_url_scheme: None, proxy_proto: None, compression: None, circuit_breaker: None, ip_restriction: None, basic_auth: None, oauth: None, oidc: None, webhook_verification: None, mutual_tls_ca: None, request_headers: None, response_headers: None, websocket_tcp_converter: None }, extra: BindExtra { token: ********, ip_policy_ref: "", metadata: "" } }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [35mDEBUG[0m muxado::stream_manager ] got none from stream, trying to send a fin needs_fin=true
[ [35mDEBUG[0m muxado::stream_manager ] removing stream and sending fin
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(5) }, body: Data(b"") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=8
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(2) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: Data, flags: SYN, stream_id: StreamID(7) }, body: Data(b"\0\0\0\x01") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(509), typ: Data, flags: (empty), stream_id: StreamID(7) }, body: Data(b"{\"Id\":\"\",\"Proto\":\"https\",\"ForwardsTo\":\"app://host//home/user/PycharmProjects/telepirate/target/debug/telepirate?pid=7741\",\"Opts\":{\"Hostname\":\"\",\"Auth\":\"\",\"Subdomain\":\"\",\"HostHeaderRewrite\":false,\"LocalUrlScheme\":null,\"ProxyProto\":0,\"Compression\":null,\"CircuitBreaker\":null,\"IPRestriction\":null,\"BasicAuth\":null,\"OAuth\":null,\"OIDC\":null,\"WebhookVerification\":null,\"MutualTLSCA\":null,\"RequestHeaders\":null,\"ResponseHeaders\":null,\"WebsocketTCPConverter\":null},\"Extra\":{\"Token\":\"\",\"IPPolicyRef\":\"\",\"Metadata\":\"\"}}") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=517
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(4)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(509)) }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(509)) }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(509)) }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tracing::span::active ] -> read_task;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(1164), typ: Data, flags: (empty), stream_id: StreamID(7) }, body: Data(b"{\"Id\":\"a1a6e822a914f82ac2bb38b8e45c9ab0\",\"URL\":\"https://bfde-138-199-6-242.eu.ngrok.io\",\"Proto\":\"https\",\"Opts\":{\"Domain\":\"\",\"Hostname\":\"bfde-138-199-6-242.eu.ngrok.io\",\"Subdomain\":\"\",\"Auth\":\"\",\"HostHeaderRewrite\":false,\"LocalURLScheme\":\"\",\"ProxyProto\":0,\"Compression\":null,\"CircuitBreaker\":null,\"IPRestriction\":null,\"BasicAuth\":null,\"OAuth\":null,\"OIDC\":null,\"WebhookVerification\":null,\"MutualTLSCA\":null,\"RequestHeaders\":null,\"ResponseHeaders\":null,\"WebsocketTCPConverter\":null},\"Error\":\"\",\"Extra\":{\"Token\":\"Fkaef27ItjhJneAKfx2vwio/3C8LiEEu$rCdy9+obs45xSmiU/BYqAvGLIuj1S7qcjS2wx8gLomjE52RxrLzj43GQoe9HsqLlCeVNN3rRpYp6jYmJ4m+z3psKjcE5u0GKkxdzttsg0CYQYDVjbK3sivlgJukvhX27pjXZoasAyCyi+IWmhP77DGlNhBczoiWqxaJBOhtd0fGr5HjDVyz1EXhxKN0KAZyb8TRVIBqbftICmz/cjxeSH1CCuRes3XvmTS662PofqcZFHU2AmeOavHfOFeUo7B2Qgb3EjRdcSNzGMraKmBsif2GHYE9YCMraMO6dht+iNx764Yx1vzHAiOb+azxWT7EEebjzCg5Vh+pP6IgjKsIrqEdggYwqa4b7Z6Hh2sVxs09tByTC7ZEtjFG4epVzaN5FNAWTVl/I+1nXaHZ1r36rF4yfFghG0qLCC4DhirS545Ygsr9jyse3mqnTb9Y+uI4fJA6HVKYX24GRN3syKMotxsALTWMO+jxThtRlLJvEocZbYfeAeL5ThvogQkydm3fgyb+Otab/PzA5sBuCAQTfAOw+KmSJnh8GWFi4aahXFDXrvubyeM8i5EknP1eiVpAm5A6/yyP5Azz3Npd1nof72YGz04AoNnOoNT7PVVXiEBLh\"}}") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(1164), typ: Data, flags: (empty), stream_id: StreamID(7) }, body: Data(b"{\"Id\":\"a1a6e822a914f82ac2bb38b8e45c9ab0\",\"URL\":\"https://bfde-138-199-6-242.eu.ngrok.io\",\"Proto\":\"https\",\"Opts\":{\"Domain\":\"\",\"Hostname\":\"bfde-138-199-6-242.eu.ngrok.io\",\"Subdomain\":\"\",\"Auth\":\"\",\"HostHeaderRewrite\":false,\"LocalURLScheme\":\"\",\"ProxyProto\":0,\"Compression\":null,\"CircuitBreaker\":null,\"IPRestriction\":null,\"BasicAuth\":null,\"OAuth\":null,\"OIDC\":null,\"WebhookVerification\":null,\"MutualTLSCA\":null,\"RequestHeaders\":null,\"ResponseHeaders\":null,\"WebsocketTCPConverter\":null},\"Error\":\"\",\"Extra\":{\"Token\":\"Fkaef27ItjhJneAKfx2vwio/3C8LiEEu$rCdy9+obs45xSmiU/BYqAvGLIuj1S7qcjS2wx8gLomjE52RxrLzj43GQoe9HsqLlCeVNN3rRpYp6jYmJ4m+z3psKjcE5u0GKkxdzttsg0CYQYDVjbK3sivlgJukvhX27pjXZoasAyCyi+IWmhP77DGlNhBczoiWqxaJBOhtd0fGr5HjDVyz1EXhxKN0KAZyb8TRVIBqbftICmz/cjxeSH1CCuRes3XvmTS662PofqcZFHU2AmeOavHfOFeUo7B2Qgb3EjRdcSNzGMraKmBsif2GHYE9YCMraMO6dht+iNx764Yx1vzHAiOb+azxWT7EEebjzCg5Vh+pP6IgjKsIrqEdggYwqa4b7Z6Hh2sVxs09tByTC7ZEtjFG4epVzaN5FNAWTVl/I+1nXaHZ1r36rF4yfFghG0qLCC4DhirS545Ygsr9jyse3mqnTb9Y+uI4fJA6HVKYX24GRN3syKMotxsALTWMO+jxThtRlLJvEocZbYfeAeL5ThvogQkydm3fgyb+Otab/PzA5sBuCAQTfAOw+KmSJnh8GWFi4aahXFDXrvubyeM8i5EknP1eiVpAm5A6/yyP5Azz3Npd1nof72YGz04AoNnOoNT7PVVXiEBLh\"}}") }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(1164), typ: Data, flags: (empty), stream_id: StreamID(7) }, body: Data(b"{\"Id\":\"a1a6e822a914f82ac2bb38b8e45c9ab0\",\"URL\":\"https://bfde-138-199-6-242.eu.ngrok.io\",\"Proto\":\"https\",\"Opts\":{\"Domain\":\"\",\"Hostname\":\"bfde-138-199-6-242.eu.ngrok.io\",\"Subdomain\":\"\",\"Auth\":\"\",\"HostHeaderRewrite\":false,\"LocalURLScheme\":\"\",\"ProxyProto\":0,\"Compression\":null,\"CircuitBreaker\":null,\"IPRestriction\":null,\"BasicAuth\":null,\"OAuth\":null,\"OIDC\":null,\"WebhookVerification\":null,\"MutualTLSCA\":null,\"RequestHeaders\":null,\"ResponseHeaders\":null,\"WebsocketTCPConverter\":null},\"Error\":\"\",\"Extra\":{\"Token\":\"Fkaef27ItjhJneAKfx2vwio/3C8LiEEu$rCdy9+obs45xSmiU/BYqAvGLIuj1S7qcjS2wx8gLomjE52RxrLzj43GQoe9HsqLlCeVNN3rRpYp6jYmJ4m+z3psKjcE5u0GKkxdzttsg0CYQYDVjbK3sivlgJukvhX27pjXZoasAyCyi+IWmhP77DGlNhBczoiWqxaJBOhtd0fGr5HjDVyz1EXhxKN0KAZyb8TRVIBqbftICmz/cjxeSH1CCuRes3XvmTS662PofqcZFHU2AmeOavHfOFeUo7B2Qgb3EjRdcSNzGMraKmBsif2GHYE9YCMraMO6dht+iNx764Yx1vzHAiOb+azxWT7EEebjzCg5Vh+pP6IgjKsIrqEdggYwqa4b7Z6Hh2sVxs09tByTC7ZEtjFG4epVzaN5FNAWTVl/I+1nXaHZ1r36rF4yfFghG0qLCC4DhirS545Ygsr9jyse3mqnTb9Y+uI4fJA6HVKYX24GRN3syKMotxsALTWMO+jxThtRlLJvEocZbYfeAeL5ThvogQkydm3fgyb+Otab/PzA5sBuCAQTfAOw+KmSJnh8GWFi4aahXFDXrvubyeM8i5EknP1eiVpAm5A6/yyP5Azz3Npd1nof72YGz04AoNnOoNT7PVVXiEBLh\"}}") }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tokio_util::codec::framed_impl ] frame decoded from buffer
[ [34mTRACE[0m muxado::session ] received frame from remote frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(7) }, body: Data(b"") }
[ [34mTRACE[0m muxado::session ] handle_frame; frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(7) }, body: Data(b"") }
[ [34mTRACE[0m muxado::stream_manager ] send_to_stream; frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(7) }, body: Data(b"") }
[ [34mTRACE[0m muxado::stream_manager ] checking stream for readiness
[ [34mTRACE[0m tracing::span ] -- send_to_stream;
[ [34mTRACE[0m tracing::span ] -- handle_frame;
[ [34mTRACE[0m tokio_util::codec::framed_impl ] attempting to decode a frame
[ [34mTRACE[0m tracing::span::active ] <- read_task;
[ [34mTRACE[0m tracing::span::active ] -> write_task;
[ [35mDEBUG[0m ngrok::internals::raw_session ] decoded rpc response resp=Ok(BindResp { client_id: "a1a6e822a914f82ac2bb38b8e45c9ab0", url: "https://bfde-138-199-6-242.eu.ngrok.io", proto: "https", bind_opts: HttpEndpoint { hostname: "bfde-138-199-6-242.eu.ngrok.io", auth: "", subdomain: "", host_header_rewrite: false, local_url_scheme: None, proxy_proto: None, compression: None, circuit_breaker: None, ip_restriction: None, basic_auth: None, oauth: None, oidc: None, webhook_verification: None, mutual_tls_ca: None, request_headers: None, response_headers: None, websocket_tcp_converter: None }, extra: BindRespExtra { token: ******** } })
[ [34mTRACE[0m tracing::span ] -- rpc;
[ [34mTRACE[0m tracing::span ] -- listen;
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(32)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [32mINFO[0m telepirate::bot ] Initializing the bot ...
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(32)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(64)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(128)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(256)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(512)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(4), typ: WndInc, flags: (empty), stream_id: StreamID(7) }, body: WndInc(WndInc(140)) }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=12
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [35mDEBUG[0m muxado::stream_manager ] got none from stream, trying to send a fin needs_fin=true
[ [35mDEBUG[0m muxado::stream_manager ] removing stream and sending fin
[ [34mTRACE[0m muxado::session ] sending frame to remote frame=Frame { header: Header { length: Length(0), typ: Data, flags: FIN, stream_id: StreamID(7) }, body: Data(b"") }
[ [34mTRACE[0m tokio_util::codec::framed_impl ] flushing framed transport
[ [34mTRACE[0m tokio_util::codec::framed_impl ] writing; remaining=8
[ [34mTRACE[0m tokio_util::codec::framed_impl ] framed transport flushed
[ [34mTRACE[0m tracing::span::active ] <- write_task;
[ [35mDEBUG[0m ngrok::internals::raw_session ] unlisten; id="a1a6e822a914f82ac2bb38b8e45c9ab0"
[ [34mTRACE[0m tracing::span ] -- read_task;
[ [35mDEBUG[0m ngrok::internals::raw_session ] rpc; req=Unbind { client_id: "a1a6e822a914f82ac2bb38b8e45c9ab0" }
[ [34mTRACE[0m tracing::span ] -- rpc;
[ [34mTRACE[0m tracing::span ] -- unlisten;
[ [34mTRACE[0m tracing::span ] -- write_task;
[ [32mINFO[0m telepirate ] Starting up ...
[ [32mINFO[0m telepirate::bot ] Building ngrok tunnel ...
[ [32mINFO[0m telepirate::bot ] Initializing the bot ...
